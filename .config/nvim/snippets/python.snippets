###########################################################################
#                             Python Snippets                             #
###########################################################################

#############
#  General  #
#############

snippet main "Main declaration and execution"
	def main():
		"""${1:TODO: Docstring for main.}"""
		${2:# code}
		pass


	if __name__ == "__main__":
		main()
snippet printf "Print formatted"
	print(f"${1:text} {${2:variable}}${3}")
snippet printbr "Print breakline"
	print("${0:-}" * 39)
snippet ts "Time start"
	t0 = time.time()
snippet te "Time end"
	print(f"${0} - finished in {time.time() - t0:.4f}")
snippet tes "Time end section"
	print("---------------------------------------")
	print(f"Code finished in {time.time() - t0:.4f}")
	print("---------------------------------------")
snippet jprint "JSON print"
	print(__import__("json").dumps(${1}, indent=4))${2}

#############
#  Imports  #
#############

snippet syse "Sys exit"
	__import__("sys").exit(${1:${VISUAL:1}})${2}
snippet idc "Import dataclass"
	from wg_py_models import DataClass, GlobalConfig, dataclass
snippet ity "Import typing"
	from typing import Any, List, Tuple, Dict, Optional, Union, Optional

#############
#    Iter   #
#############

snippet while "while"
	while ${1:${VISUAL:True}}:
		${2:${VISUAL:pass}}
	${3}

#############
#   Class   #
#############

snippet dc "Dataclass"
	@dataclass(config=GlobalConfig)
	class ${1:classname}(DataClass):

		"""Docstring for $1. """

		${2:pass}
snippet posti "Post init function"
	def __post_init__(self):
		${3:${VISUAL:pass}}

#############
#  Context  #
#############

snippet witho "With open file"
	with open(f"${1:filename}", "${2:r}") as f:
		${3:pass}

snippet jsond "Dump contents to json file"
	with open(f"${1:output}.json", "${2:w}") as f:
		json.dump(${3:data}, f, indent=2)

snippet jsonl "Load contents from json file"
	with open(f"${1:file}") as f:
		${2:data} = json.load(f)

#############
#   Async   #
#############

snippet amain "Async main"
	import asyncio

	async def main():
		"""${1:TODO: Docstring for main.}"""
		${2:# code}
		pass


	if __name__ == "__main__":
		asyncio.run(main())

snippet afor "Async for"
	async for ${1:item} in ${2:iterator}:
		${2:${VISUAL:pass}}
	${3}

snippet aread "Async read file"
	import aiofiles

	async with aiofiles.open(f"${1:filename}", "${2:r}") as f:
		${3:data = await f.read()}

snippet awrite "Async write file"
	import aiofiles

	async with aiofiles.open(f"${1:filename}", "${2:w}") as f:
		await f.write(str("\n").join(${2:data}))

snippet areq "Async request"
	import aiohttp

	async with aiohttp.ClientSession(${1:headers=headers, cookies=cookies}) as session:
		async with session.${2:get}(${3:url}) as resp:
			${4:return await resp}

snippet achunck "Async list chunking"

	amount_per_iteration = 100
	amount_of_iterations = len(${1:lst}) // amount_per_iteration + 1
	index = 0

	t0 = time.time()
	for _ in range(amount_of_iterations):

	    subset = $1[index : min(index + amount_per_iteration, len($1))]
	    index += amount_per_iteration

	    tasks = [
	        asyncio.create_task(${2:function}(sub))
	        for sub in subset
	    ]

	    for t in tasks:
	        await t

	print(f"Done - finished in {time.time() - t0:.4f}")

#############
#  Comments #
#############

snippet sec "Section with breaklines"
	# ---------------------------------------
	# ${1}
	# ---------------------------------------

snippet br "Breakline"
	# ---------------------------------------${0}

#############
#  Logging  #
#############

snippet linfo "logger info"
	logger.info(f"${1:header}")
snippet lerror "logger error"
	logger.error(f"${1:header}")
snippet ldebug "logger debug"
	logger.debug(f"${1:header}")

#############
#   Others  #
#############

snippet sub "Subscriptable item"
	["${1:key}"]${2}
