###########################################################################
#                             Python Snippets                             #
###########################################################################

#############
#  General  #
#############

snippet main "Main declaration and execution"
	def main():
		"""${1:TODO: Docstring for main.}"""
		${2:# code}
		pass


	if __name__ == "__main__":
		main()

snippet printf "Print formatted"
	print(f"${1:text} {${2:variable}}${3}")

snippet printbr "Print breakline"
	print("-" * 39)

snippet ts "Time start"
	t0 = time.time()

snippet te "Time end"
	print(f"${0} - finished in {time.time() - t0:.4f}")

snippet tes "Time end section"
	print("---------------------------------------")
	print(f"Code finished in {time.time() - t0:.4f}")
	print("---------------------------------------")

#############
#  Imports  #
#############

snippet syse "Sys exit"
	__import__("sys").exit(${1:${VISUAL:1}})${2}

#############
#    Iter   #
#############

snippet while "while"
	while ${1:${VISUAL:True}}:
		${2:${VISUAL:pass}}
	${3}

#############
#   Class   #
#############

snippet classd "Dataclass"
	@dataclass
	class ${1:class}:

		"""Docstring for $1. """

		${2:pass}

snippet posti "Post init function"
	def __post_init__(self):
		${3:${VISUAL:pass}}

#############
#  Context  #
#############

snippet witho "With open file"
	with open(f"${1:filename}", "${2:r}") as f:
		${3:pass}

snippet jsond "Dump contents to json file"
	with open(f"${1:output}.json", "${2:w}") as f:
		json.dump(${3:data}, f, indent=2)

snippet jsonl "Load contents from json file"
	with open(f"${1:input}.json") as f:
		${2:data} = json.load(f)

#############
#   Async   #
#############

snippet amain "Async main"
	import asyncio

	async def main():
		"""${1:TODO: Docstring for main.}"""
		${2:# code}
		pass


	if __name__ == "__main__":
		asyncio.run(main())

snippet witho "With open file"
	with open(f"${1:filename}", "${2:r}") as f:
		${3:pass}

snippet aread "Async read file"
	import aiofiles

	async with aiofiles.open(f"${1:filename}", "${2:r}") as f:
		${3:data = await f.read()}
		# ${3:data = await f.read()}

snippet areq "Async request"
	import aiohttp

	async with aiohttp.ClientSession(${1:headers=headers, cookies=cookies}) as session:
		async with session.${2:get}(${3:url}) as resp:
			${4:return await resp}

#############
#  Comments #
#############

snippet sec "Section with breaklines"
	# ---------------------------------------
	# ${1}
	# ---------------------------------------

snippet br "Breakline"
	# ---------------------------------------${0}

#############
#   Others  #
#############

snippet sub "Subscriptable item"
	["${1:key}"]${2}
