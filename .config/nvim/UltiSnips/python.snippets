###########################################################################
#                             Python Snippets                             #
###########################################################################

#############
#  General  #
#############

snippet main "Main declaration and execution"
def main():
	"""${1:TODO: Docstring for main.}"""
	${2:# code}
	pass


if __name__ == "__main__":
	main()
endsnippet

snippet printf "Print formatted"
print(f"${1:text} {${2:variable}}${3}")
endsnippet

snippet printfv "Print formatted variable"
print(f"{${2:variable}=}${3}")
endsnippet

snippet printbr "Print breakline"
print("${0:-}" * 39)
endsnippet

snippet ts "Time start"
t0 = time.time()
endsnippet

snippet te "Time end"
print(f"${0} - finished in {time.time() - t0:.4f}")
endsnippet

snippet tes "Time end section"
print("---------------------------------------")
print(f"Code finished in {time.time() - t0:.4f}")
print("---------------------------------------")
endsnippet

#############
#  Imports  #
#############

snippet syse "Sys exit"
__import__("sys").exit(${1:${VISUAL:1}})${2}
endsnippet

snippet ifu "Import futures"
from __future__ import annotations
endsnippet

snippet ity "Import typing"
from typing import Any, ClassVar, Dict, List, Literal, Optional, Tuple, Union
endsnippet

snippet ie "Import enum"
from enum import Enum
endsnippet

snippet il "Import logger"
from logging import Logger
endsnippet

snippet idt "Import datetime"
from datetime import date, datetime, timedelta
endsnippet

snippet ibc "Import base class"
from pydantic import BaseModel as Base
endsnippet

snippet iwc "Import WG base class"
from wg_py_models import Base
endsnippet

snippet iws "Import WG session"
from wg_py_models.api_call import Session
endsnippet

snippet ij "Import json"
import json
endsnippet

snippet iu "Import uuid"
from uuid import UUID, uuid4
endsnippet

#############
# DateTime  #
#############

snippet dtn "Datetime now"
now = datetime.now()
endsnippet

#############
#    Iter   #
#############

snippet while "while"
while ${1:${VISUAL:True}}:
	${2:${VISUAL:pass}}
${3}
endsnippet

#############
#   Class   #
#############

snippet fl "Field"
Field(${1:...}, description=${2:None}, example=${3:None})
endsnippet

snippet dc "Dataclass"
@dataclass(config=GlobalConfig)
class ${1:classname}(DataClass):

	"""Docstring for $1. """

	${2:pass}
endsnippet

snippet ec "Enum class"
class ${1:classname}(Enum):

	${2:pass}
endsnippet

snippet bc "Base class"
class ${1:classname}(Base):

	"""Docstring for $1. """

	${2:pass}
endsnippet

snippet ef "Extend function"
super().${1:function}(${2:args})
endsnippet

snippet posti "Post init function"
def __post_init__(self):
	${3:${VISUAL:pass}}
endsnippet

snippet postie "Post init extend function"
def __post_init__(self):
	super().__init__(**kwargs)
	${3:${VISUAL:pass}}
endsnippet

snippet inie "Init extend"
def __init__(self, **kwargs):
	super().__init__(**kwargs)
	self.${1}
endsnippet

snippet inii "Init inheritence"
def __init__(self, **kwargs):
	assert kwargs.get(${1:key})
	${2:var} = ${3:item}
	super().__init__($2=$2, **kwargs)
endsnippet

#############
#  Context  #
#############

snippet read "With open file to read"
with open(f"${1:filename}", "${2:r}") as f:
	${3:pass}
endsnippet

snippet write "With open file to write"
with open(f"${1:filename}", "${2:w}") as f:
	${3:pass}
endsnippet

snippet jdump "Dump contents to json file"
with open(f"${1:output}.json", "${2:w}") as f:
	json.dump(${3:data}, f, indent=2)
endsnippet

#############
#   Json    #
#############

snippet jread "Load contents from json file"
with open(f"${1:file}") as f:
	${2:data} = json.load(f)
endsnippet

snippet jprint "JSON print"
print(__import__("json").dumps(${1}, indent=4))${2}
endsnippet

#############
#   Async   #
#############

snippet amain "Async main"
import asyncio

async def main():
	"""${1:TODO: Docstring for main.}"""
	${2:# code}
	pass


if __name__ == "__main__":
	asyncio.run(main())
endsnippet

snippet afor "Async for"
async for ${1:item} in ${2:iterator}:
	${2:${VISUAL:pass}}
${3}
endsnippet

snippet aread "Async read file"
import aiofiles

async with aiofiles.open(f"${1:filename}", "${2:r}") as f:
	${3:data = await f.read()}
endsnippet

snippet awrite "Async write file"
import aiofiles

async with aiofiles.open(f"${1:filename}", "${2:w}") as f:
	await f.write(str("\n").join(${2:data}))
endsnippet

snippet areq "Async request"
import aiohttp

async with aiohttp.ClientSession(${1:headers=headers, cookies=cookies}) as session:
	async with session.${2:get}(${3:url}) as resp:
		${4:return await resp}
endsnippet

snippet achunck "Async list chunking"

amount_per_iteration = 100
amount_of_iterations = len(${1:lst}) // amount_per_iteration + 1
index = 0

t0 = time.time()
for _ in range(amount_of_iterations):

	subset = $1[index : min(index + amount_per_iteration, len($1))]
	index += amount_per_iteration

	tasks = [
		asyncio.create_task(${2:function}(sub))
		for sub in subset
	]

	for t in tasks:
		await t

print(f"Done - finished in {time.time() - t0:.4f}")
endsnippet

#############
#  Comments #
#############

snippet h1 "Header 1"
# ---------------------------------------
# ${1}
# ---------------------------------------
endsnippet

snippet h1f "Header 1 with folds"
# ---------------------------------------
# ${1} {{{1 #
# ---------------------------------------
endsnippet

snippet h1c "Header 1 close"
# 1}}} #
# ---------------------------------------
endsnippet

snippet h2 "Header 2"
# ${1}
# -----------------
endsnippet

snippet h2f "Header 2 with folds"
# ${1} {{{1 #
# -----------------
endsnippet

snippet h2c "Header 2 close"
# 1}}} #
# -----------------
endsnippet

snippet br "Breakline"
# ---------------------------------------${0}
endsnippet

#############
#  Logging  #
#############

snippet linfo "logger info"
self.logger.info(f"${1:header}")
endsnippet

snippet lerror "logger error"
self.logger.error(f"${1:header}")
endsnippet

snippet ldebug "logger debug"
self.logger.debug(f"${1:header}")
endsnippet

#############
#   Others  #
#############

snippet sub "Subscriptable item"
["${1:key}"]${2}
endsnippet

snippet sanic "Create getting started webserver of Sanic"
from sanic import Sanic
from sanic.response import json

app = Sanic()


@app.route("/")
async def test(request):
	return json({"hello": "world"})


if __name__ == "__main__":
	app.run(host="0.0.0.0", port=8000)
endsnippet

snippet fastapi "FastAPI"
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/")
async def root(params: str = Query(None)):
	return {"message": params}


@app.post("/")
async def root_post():
	return {"verb": "POST"}
endsnippet

# vim: ft=snippets

