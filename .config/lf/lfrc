#############################
#      ___      _______     #
#     |   |    |       |    #
#     |   |    |    ___|    #
#     |   |    |   |___     #
#     |   |___ |    ___|    #
#     |       ||   |        #
#     |_______||___|        #
#                           #
#############################

# ---------------------------
#  Settings {{{1 #
# ---------------------------

set shell zsh
set shellopts '-euy'

set ifs "\n"

set number true
set numberfmt "\033[33m"

set dircounts true
set dirfirst true

set drawbox true
set icons true

set scrolloff 5

set sixel true
set previewer file-preview

# ---------------------------
#  1}}} #
# ---------------------------

# ---------------------------
#  Commands {{{1 #
# ---------------------------

cmd dragon %dragon-drop -a -x $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile

cmd stripspace %stripspace "$f"

cmd go-symlink ${{
    link=$(readlink $f)
    path=$(dirname "$link")
    lf -remote "send $id cd $path"
}}

cmd node_script ${{
  script=$(cat package.json | jq -r '.scripts | keys[] ' | sort | fzf --height 20%) && npm run $(echo "$script")
}}

cmd usage $du -h -d1 | less

cmd count !echo  "Amount of files in dir:" $(dirname $f) && find . | wc -l

cmd mkdir %mkdir -p "$@"

cmd yank_path &echo -n $f | tr -d '\n' | wl-copy

cmd yank_name &basename $f | tr -d '\n' | wl-copy

cmd yank_basename &{{
    filename=$(basename -- "$f")
    echo "${filename%.*}" | tr -d '\n' | wl-copy
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd newfold ${{
    set -f
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# Get progress of copynig
cmd paste_rsync &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd paste_overwrite %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -Rf $list .
    elif [ $mode = 'move' ]; then
        mv $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd paste_symlink %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd delete ${{
	set -f
	printf "%s\n\t" "$fx"
	printf "delete? type yes: "
	read ans
	[ $ans = "yes" ] && rm -rf $fx
}}

cmd trash ${{
	set -f
	printf "%s\n\t" "$fx"
	printf "to trash?[y/n]"
	read ans
	[ $ans = "y" ] && mv $fx ~/.local/share/Trash
}}

cmd open ${{
    case $(file --mime-type $f -b) in
        *zip) atool --list -- $f | less;;
        *tar) atool --list -- $f | less;;
        *compressed) atool --list -- $f | less;;
        *) xdg-open $fx &;;
    esac
    wait
    lf -remote "send $id redraw"
}}


cmd background_open &{{
    nohup xdg-open $fx &
}}

cmd background_open_ask ${{
    mimeopen --ask $f
    # nohup mimeopen --ask $fx
}}

cmd convert !{{
    set -f
    case $f in
        *.ipynb) convert-scripts "$f";;
        *.docx|*.odt|*.doc|*.docx|*.odt|*.pptx|*.xls|*.xlsx) convert-word-document "$f" ".";;
        *) echo "No converter for $f";;
    esac
}}

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar) tar xvf $f;;
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0; lf - $(pwd | sed "s|$HOME|~|")\007" > /dev/tty
}}

# ---------------------------
#  1}}} #
#  --------------------------

#  --------------------------
#  Mappings {{{1 #
# ---------------------------

# Unmappings
map c
map d
map p
map y

map <backspace2> :set hidden!
map <esc> clear

map t push $touch<space>

map m push :mkdir<space>
map M mark-save

map <enter> shell

map P :set preview!
map i $file-preview $f | less -R
# map I $file-preview $f | nvim -

map C convert

# Delete
map dD delete
map dd cut
map D trash

map <a-n> newfold

# Copy
map yy copy
map yn yank_name
map yp yank_path
map yb yank_basename

# Paste
map pp paste
map pP paste_rsync
map po paste_overwrite
map pa paste_append
map pl paste_symlink

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o background_open
map O background_open_ask

map W &xdg-open .

# FuzzyFind
map f $fuzzy-open
map F $lf -remote "send $id select '$(fzf)'"

# Dragon
map dr dragon
map dm mvdragon
map dc cpdragon
map dl dlfile

map sS stripspace

# Usage
map u count
map U usage

map R $lf -remote "send $id redraw"

map r push :rename<space>
map E $lf -remote "send $id push :rename<space>$f<a-b><a-d>"
map I $lf -remote "send $id push :rename<space>$f<a-b><a-b>"

map A ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename"
}}
# Edit filename before the extension
map a ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename<a-b><c-b>"
}}

map <a-n> newfold

cmd newfold ${{
    set -f
	printf "new directory name:"
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

map V push $nvim<space>

map br bulk-rename

# Movements
map gL go-symlink
map gG $lf -remote "send $id cd $GOPATH"

map gr cd /
map ge cd /etc
map gu cd /usr
map gM cd /mnt

map gR $lf -remote "send $id cd /run/media/$USER"

map gt cd /tmp

map gT cd ~/.local/share/Trash/
map gm cd ~/.local/share/mail/

map gh cd ~
map gc cd ~/.config
map gl cd ~/.local
map gd cd ~/Documents
map gD cd ~/Downloads
map gp cd ~/Pictures
map gP cd ~/Documents/Personal
map gv cd ~/Videos

map gs
map gsp ${{
    lf -remote "send $id cd ~/.scripts/py"
}}
map gsg cd ~/.scripts/go
map gsr cd ~/.scripts/go

map gw cd ~/Documents/Work/WeGroup
map gb cd ~/Documents/Work/WeGroup/Bitbucket

map cbC $lf -remote "send $id cd $(go-project bC)"
map cbQ $lf -remote "send $id cd $(go-project bQ)"
map cba $lf -remote "send $id cd $(go-project ba)"
map cbb $lf -remote "send $id cd $(go-project bb)"
map cbc $lf -remote "send $id cd $(go-project bc)"
map cbd $lf -remote "send $id cd $(go-project bd)"
map cbD $lf -remote "send $id cd $(go-project bD)"
map cbe $lf -remote "send $id cd $(go-project be)"
map cbf $lf -remote "send $id cd $(go-project bf)"
map cbF $lf -remote "send $id cd $(go-project bF)"
map cbh $lf -remote "send $id cd $(go-project bh)"
map cbm $lf -remote "send $id cd $(go-project bm)"
map cbp $lf -remote "send $id cd $(go-project bp)"
map cbq $lf -remote "send $id cd $(go-project bq)"
map cbv $lf -remote "send $id cd $(go-project bv)"
map cfc $lf -remote "send $id cd $(go-project fc)"
map cfd $lf -remote "send $id cd $(go-project fd)"
map cff $lf -remote "send $id cd $(go-project ff)"
map cfm $lf -remote "send $id cd $(go-project fm)"
map cfw $lf -remote "send $id cd $(go-project fw)"
map coc $lf -remote "send $id cd $(go-project oc)"
map cod $lf -remote "send $id cd $(go-project od)"
map com $lf -remote "send $id cd $(go-project om)"
map coo $lf -remote "send $id cd $(go-project oo)"
map cos $lf -remote "send $id cd $(go-project os)"
map cof $lf -remote "send $id cd $(go-project of)"

map gV cd ~/Documents/VEST

map gH cd ~/Documents/Howest/

# ---------------------------
#  1}}} #
#  -------------------------

#  --------------------------
#  Runners {{{1 #
# ---------------------------

%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

# Show current directory in window title
on-cd

# ---------------------------
#  1}}} #
#  -------------------------
