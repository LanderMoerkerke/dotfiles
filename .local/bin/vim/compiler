#!/bin/sh

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# tex files: Compiles to pdf, including bibliography if necessary
# md files: Compiles to pdf via pandoc
# rmd files: Compiles via R Markdown
# c files: Compiles via whatever compiler is set to cc. Usually gcc.
# py files: runs via python command
# go files: compiles and runs with "go run"
# config.h files: (For suckless utils) recompiles and installs program.
# all others: run `sent` to show a presentation

file=$(readlink -f "$1")
dir=$(dirname "$file")
base="${file%.*}"
shebang=$(sed -n 1p "$file")

cd "$dir" || exit

textype() {
    command="pdflatex --shell-escape"
    (sed 5q "$file" | grep -i -q 'xelatex') && command="xelatex --shell-escape"
    $command --output-directory="$dir" "$base" &&
        grep -i addbibresource "$file" >/dev/null &&
        biber --input-directory "$dir" "$base" &&
        $command --output-directory="$dir" "$base" &&
        $command --output-directory="$dir" "$base" &&
        texclear $file
    pdftotext $base.pdf - | tr " " "\n" | tr "" "." | sort | wc -l
}

shebangtest() {
    case "$shebang" in
        \#\!*) "$file" ;;
        *) sent "$file" 2>/dev/null &;;
    esac
}

case "$file" in
    *\.ms) refer -PS -e "$file" | groff -me -ms -kejpt -T pdf >"$base".pdf ;;
    *\.mom) refer -PS -e "$file" | groff -mom -kejpt -T pdf >"$base".pdf ;;
    *\.Rmd | *\.Rmd) echo "require(rmarkdown); render('$file')" | R -q --no-save ;;
    *\.tex) textype "$file" ;;
    # *\.md) pandoc "$file" --filter pandoc-include-code --filter pandoc-include --pdf-engine=xelatex -V geometry:margin=1in -o "$base".pdf ;;
    *\.md) pandoc --self-contained -H $COMPILE/Themes/markdown/github-header.css -s "$file" | wkhtmltopdf - "$base".pdf ;;
    # *\.md) pandoc --self-contained -H $COMPILE/Themes/markdown/github-header.css -s "$file" | wkhtmltopdf - "$base".pdf ;;
    *config.h) make && sudo make install ;;
    *\.c) cc "$file" -o "$base" && "$base" ;;
    *\.py) python "$file" ;;
    *\.go) go run "$file" ;;
    *\.sent) setsid sent "$file" 2>/dev/null &;;
    *) sed 1q "$file" | grep "^#!/" | sed "s/^#!//" | xargs -r -I % "$file" ;;
esac
